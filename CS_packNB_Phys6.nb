(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     94081,       1683]
NotebookOptionsPosition[     93788,       1670]
NotebookOutlinePosition[     94125,       1685]
CellTagsIndexPosition[     94082,       1682]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"CloudDeploy", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Delayed", "[", "\[IndentingNewLine]", 
    RowBox[{"APIFunction", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"RandomChoice", "[", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
         "1", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"data", "=", 
           RowBox[{"SortBy", "[", 
            RowBox[{
             RowBox[{"RandomSample", "[", 
              RowBox[{
               InterpretationBox[
                DynamicModuleBox[{Typeset`open = False}, 
                 TemplateBox[{"List","ListIcon",GridBox[{{
                    RowBox[{
                    TagBox["\"Head: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["List", "IconizedItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"185", ",", "2"}], "}"}], "IconizedItem"]}]}, {
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["52080", "IconizedItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                   Dynamic[Typeset`open]},
                  "IconizedObject"]],
                {{"actinium-206", 
                  Quantity[22.0000000000000000001`2., "Milliseconds"]}, {
                 "actinium-207", 
                  Quantity[27.`2., "Milliseconds"]}, {"actinium-208", 
                  Quantity[95.`2., "Milliseconds"]}, {"actinium-208", 
                  Quantity[95.`2., "Milliseconds"]}, {"actinium-209", 
                  Quantity[100.0000000000000055518`3., "Milliseconds"]}, {
                 "actinium-210", 
                  Quantity[350.`3., "Milliseconds"]}, {"actinium-211", 
                  Quantity[209.9999999999999922288`3., "Milliseconds"]}, {
                 "actinium-212", 
                  Quantity[930.0000000000000488498`3., "Milliseconds"]}, {
                 "actinium-213", 
                  Quantity[738.`3., "Milliseconds"]}, {"actinium-222", 
                  Quantity[5.`2., "Seconds"]}, {"actinium-227", 
                  Quantity[21.7719999999999984652`5., "Years"]}, {
                 "actinium-227", 
                  Quantity[21.7719999999999984652`5., "Years"]}, {
                 "actinium-232", 
                  Quantity[119.`3., "Seconds"]}, {"actinium-233", 
                  Quantity[145.`3., "Seconds"]}, {"actinium-235", 
                  Quantity[60.`2., "Seconds"]}, {"aluminum-22", 
                  Quantity[58.9999999999999999999`2., "Milliseconds"]}, {
                 "aluminum-29", 
                  Quantity[6.5666666666666666668`3., "Minutes"]}, {
                 "aluminum-36", 
                  Quantity[90.`2., "Milliseconds"]}, {"aluminum-38", 
                  Quantity[7.5999999999999996447`2., "Milliseconds"]}, {
                 "aluminum-39", 
                  Quantity[7.5999999999999996447`2., "Microseconds"]}, {
                 "americium-238", 
                  Quantity[98.3333333333333333333`2., "Minutes"]}, {
                 "americium-239", 
                  Quantity[11.8888888888888888889`3., "Hours"]}, {
                 "americium-241", 
                  Quantity[432.5215626585489599188`4., "Years"]}, {
                 "antimony-104", 
                  Quantity[440.0000000000000022198`3., "Milliseconds"]}, {
                 "antimony-112", 
                  Quantity[51.4`3., "Seconds"]}, {"antimony-113", 
                  Quantity[6.6666666666666666667`2., "Minutes"]}, {
                 "antimony-116", 
                  Quantity[15.8`3., "Minutes"]}, {"antimony-116", 
                  Quantity[15.8`3., "Minutes"]}, {"antimony-117", 
                  Quantity[166.6666666666666666667`2., "Minutes"]}, {
                 "antimony-118", 
                  Quantity[216.0000000000000053291`2., "Seconds"]}, {
                 "antimony-120", 
                  Quantity[15.89`4., "Minutes"]}, {"antimony-121", 
                  Quantity[Infinity, "Seconds"]}, {"antimony-134", 
                  Quantity[780.`3., "Milliseconds"]}, {"antimony-137", 
                  Quantity[450.0000000000000000001`3., "Milliseconds"]}, {
                 "antimony-139", 
                  Quantity[150.0000000000000000001`3., "Nanoseconds"]}, {
                 "argon-31", 
                  Quantity[14.4000000000000000002`3., "Milliseconds"]}, {
                 "argon-41", 
                  Quantity[109.61`5., "Minutes"]}, {"argon-49", 
                  Quantity[169.9999999999999999999`3., "Milliseconds"]}, {
                 "arsenic-68", 
                  Quantity[151.6`4., "Seconds"]}, {"arsenic-70", 
                  Quantity[52.6666666666666666666`4., "Minutes"]}, {
                 "arsenic-72", 
                  Quantity[26.1111111111111111112`2., "Hours"]}, {
                 "astatine-198", 
                  Quantity[4.2`2., "Seconds"]}, {"astatine-203", 
                  Quantity[7.3333333333333333334`3., "Minutes"]}, {
                 "astatine-220", 
                  Quantity[223.`3., "Seconds"]}, {"barium-132", 
                  Quantity[3.`2.*^21, "Years"]}, {"berkelium-235", 
                  Quantity[20.`2., "Seconds"]}, {"berkelium-240", 
                  Quantity[4.8333333333333333334`3., "Minutes"]}, {
                 "berkelium-245", 
                  Quantity[118.6111111111111111111`3., "Hours"]}, {
                 "beryllium-14", 
                  Quantity[4.3500000000000000001`3., "Milliseconds"]}, {
                 "bismuth-184", 
                  Quantity[6.6`2., "Milliseconds"]}, {"bohrium-260", 
                  Quantity[300.`2., "Microseconds"]}, {"bohrium-263", 
                  Quantity[200.0000000000000111022`2., "Microseconds"]}, {
                 "bohrium-269", 
                  Quantity[25.`2., "Seconds"]}, {"boron-11", 
                  Quantity[Infinity, "Seconds"]}, {"bromine-74", 
                  Quantity[25.3999999999999985789`3., "Minutes"]}, {
                 "bromine-75", 
                  Quantity[96.6666666666666666667`2., "Minutes"]}, {
                 "bromine-79", 
                  Quantity[Infinity, "Seconds"]}, {"cadmium-95", 
                  Quantity[4.9999999999999999999`1., "Milliseconds"]}, {
                 "calcium-49", 
                  Quantity[8.7183333333333333333`4., "Minutes"]}, {
                 "californium-247", 
                  Quantity[186.6666666666666666666`3., "Minutes"]}, {
                 "californium-253", 
                  Quantity[17.8125`4., "Days"]}, {"cerium-124", 
                  Quantity[6.`1., "Seconds"]}, {"cerium-127", 
                  Quantity[31.`2., "Seconds"]}, {"cerium-141", 
                  Quantity[32.5081018518518518518`5., "Days"]}, {"cerium-155", 
                  Quantity[299.9999999999999999999`3., "Nanoseconds"]}, {
                 "cesium-149", 
                  Quantity[50.`2., "Milliseconds"]}, {"chlorine-30", 
                  Quantity[30.`2., "Nanoseconds"]}, {"copper-57", 
                  Quantity[196.3`4., "Milliseconds"]}, {"curium-236", 
                  Quantity[10.`2., "Minutes"]}, {"dubnium-255", 
                  Quantity[1.6000000000000000889`2., "Seconds"]}, {
                 "dubnium-258", 
                  Quantity[4.`2., "Seconds"]}, {"dysprosium-142", 
                  Quantity[2.3`2., "Seconds"]}, {"dysprosium-145", 
                  Quantity[6.`1., "Seconds"]}, {"dysprosium-155", 
                  Quantity[10.`2., "Hours"]}, {"erbium-150", 
                  Quantity[18.5`3., "Seconds"]}, {"erbium-160", 
                  Quantity[28.5833333333333333333`4., "Hours"]}, {
                 "erbium-165", 
                  Quantity[10.361111111111111111`3., "Hours"]}, {"erbium-172", 
                  Quantity[49.2999999999999971587`3., "Hours"]}, {
                 "europium-136", 
                  Quantity[3.3`2., "Seconds"]}, {"europium-162", 
                  Quantity[10.6`3., "Seconds"]}, {"europium-164", 
                  Quantity[4.2000000000000001776`2., "Seconds"]}, {
                 "flerovium-285", 
                  Quantity[5.`1., "Seconds"]}, {"flerovium-285", 
                  Quantity[5.`1., "Seconds"]}, {"flerovium-286", 
                  Quantity[5.`1., "Seconds"]}, {"flerovium-287", 
                  Quantity[10.`2., "Seconds"]}, {"flerovium-288", 
                  Quantity[2.8`2., "Seconds"]}, {"flerovium-289", 
                  Quantity[80.`2., "Seconds"]}, {"gadolinium-140", 
                  Quantity[15.8`3., "Seconds"]}, {"gallium-65", 
                  Quantity[15.2`3., "Minutes"]}, {"gold-183", 
                  Quantity[42.8`3., "Seconds"]}, {"gold-188", 
                  Quantity[8.8333333333333333333`3., "Minutes"]}, {
                 "hafnium-174", 
                  Quantity[1.997716894977166`2.*^15, "Years"]}, {
                 "holmium-140", 
                  Quantity[5.9999999999999999999`2., "Milliseconds"]}, {
                 "holmium-170", 
                  Quantity[166.`3., "Seconds"]}, {"iron-64", 
                  Quantity[2.`2., "Seconds"]}, {"lanthanum-155", 
                  Quantity[59.9999999999999999999`2., "Milliseconds"]}, {
                 "lead-183", 
                  Quantity[535.`3., "Milliseconds"]}, {"livermorium-289", 
                  Quantity[9.9999999999999999999`2., "Milliseconds"]}, {
                 "livermorium-289", 
                  Quantity[9.9999999999999999999`2., "Milliseconds"]}, {
                 "livermorium-290", 
                  Quantity[15.0000000000000000001`2., "Milliseconds"]}, {
                 "livermorium-290", 
                  Quantity[15.0000000000000000001`2., "Milliseconds"]}, {
                 "livermorium-291", 
                  Quantity[6.2999999999999998223`2., "Milliseconds"]}, {
                 "lutetium-156", 
                  Quantity[493.9999999999999999999`3., "Milliseconds"]}, {
                 "magnesium-20", 
                  Quantity[90.`2., "Milliseconds"]}, {"meitnerium-268", 
                  Quantity[53.`2., "Milliseconds"]}, {"meitnerium-269", 
                  Quantity[200.`2., "Milliseconds"]}, {"mendelevium-257", 
                  Quantity[5.5277777777777777779`3., "Hours"]}, {
                 "mendelevium-262", 
                  Quantity[200.`2., "Seconds"]}, {"mercury-173", 
                  Quantity[599.9999999999999777955`2., "Microseconds"]}, {
                 "mercury-206", 
                  Quantity[8.3200000000000002841`3., "Minutes"]}, {
                 "molybdenum-84", 
                  Quantity[3.7000000000000001776`2., "Seconds"]}, {
                 "molybdenum-87", 
                  Quantity[14.0199999999999995737`4., "Seconds"]}, {
                 "neodymium-136", 
                  Quantity[50.6666666666666666666`4., "Minutes"]}, {
                 "neodymium-158", 
                  Quantity[50.`2., "Nanoseconds"]}, {"neptunium-240", 
                  Quantity[61.8333333333333333333`4., "Minutes"]}, {
                 "niobium-83", 
                  Quantity[4.1`2., "Seconds"]}, {"nitrogen-10", 
                  Quantity[0.2`2., "Zeptoseconds"]}, {"osmium-182", 
                  Quantity[22.111111111111111111`3., "Hours"]}, {
                 "palladium-114", 
                  Quantity[145.`3., "Seconds"]}, {"palladium-97", 
                  Quantity[186.0000000000000053291`3., "Seconds"]}, {
                 "plutonium-247", 
                  Quantity[54.4444444444444444444`3., "Hours"]}, {
                 "promethium-145", 
                  Quantity[17.7257737189244038567`3., "Years"]}, {
                 "promethium-146", 
                  Quantity[5.5300000000000002486`3., "Years"]}, {
                 "promethium-147", 
                  Quantity[2.6234000000000001762`5., "Years"]}, {"radium-207", 
                  Quantity[1.3`2., "Seconds"]}, {"radium-212", 
                  Quantity[13.`2., "Seconds"]}, {"radium-214", 
                  Quantity[2.46`3., "Seconds"]}, {"radium-234", 
                  Quantity[30.`2., "Seconds"]}, {"radon-209", 
                  Quantity[28.5`4., "Minutes"]}, {"rhenium-186", 
                  Quantity[89.2463999999999977319`5., "Hours"]}, {
                 "rhodium-102", 
                  Quantity[207.1759259259259259259`3., "Days"]}, {
                 "rhodium-108", 
                  Quantity[16.8`3., "Seconds"]}, {"rhodium-91", 
                  Quantity[1.4699999999999999735`3., "Seconds"]}, {
                 "rubidium-100", 
                  Quantity[51.`2., "Milliseconds"]}, {"ruthenium-113", 
                  Quantity[800.`2., "Milliseconds"]}, {"ruthenium-116", 
                  Quantity[400.`2., "Milliseconds"]}, {"ruthenium-97", 
                  Quantity[69.4444444444444444444`2., "Hours"]}, {
                 "samarium-139", 
                  Quantity[154.`3., "Seconds"]}, {"samarium-146", 
                  Quantity[0.1030568239472349061`3., "Gigayears"]}, {
                 "terbium-153", 
                  Quantity[56.1111111111111111112`3., "Hours"]}, {
                 "terbium-155", 
                  Quantity[127.7777777777777777778`2., "Hours"]}, {
                 "terbium-167", 
                  Quantity[19.3999999999999985789`3., "Seconds"]}, {
                 "thallium-185", 
                  Quantity[19.5`3., "Seconds"]}, {"thallium-209", 
                  Quantity[132.0000000000000106582`3., "Seconds"]}, {
                 "thorium-226", 
                  Quantity[30.5666666666666666666`4., "Minutes"]}, {
                 "thorium-233", 
                  Quantity[21.8299999999999982952`4., "Minutes"]}, {
                 "thulium-159", 
                  Quantity[9.1333333333333333333`3., "Minutes"]}, {
                 "thulium-159", 
                  Quantity[9.1333333333333333333`3., "Minutes"]}, {
                 "thulium-166", 
                  Quantity[7.7777777777777777778`2., "Hours"]}, {
                 "thulium-174", 
                  Quantity[5.3333333333333333334`3., "Minutes"]}, {
                 "thulium-177", 
                  Quantity[90.`2., "Seconds"]}, {"tin-101", 
                  Quantity[1.6999999999999999555`2., "Seconds"]}, {
                 "tin-110", 
                  Quantity[4.1111111111111111112`3., "Hours"]}, {"tin-111", 
                  Quantity[35.3333333333333333333`4., "Minutes"]}, {"tin-114", 
                  Quantity[Infinity, "Seconds"]}, {"tin-133", 
                  Quantity[1.45`3., "Seconds"]}, {"titanium-56", 
                  Quantity[199.9999999999999999999`3., "Milliseconds"]}, {
                 "titanium-57", 
                  Quantity[59.9999999999999999999`2., "Milliseconds"]}, {
                 "tungsten-159", 
                  Quantity[7.2999999999999998223`2., "Milliseconds"]}, {
                 "tungsten-164", 
                  Quantity[6.3`2., "Seconds"]}, {"tungsten-167", 
                  Quantity[19.9`3., "Seconds"]}, {"tungsten-169", 
                  Quantity[74.`2., "Seconds"]}, {"tungsten-176", 
                  Quantity[150.`2., "Minutes"]}, {"tungsten-178", 
                  Quantity[21.6435185185185185185`3., "Days"]}, {
                 "tungsten-183", 
                  Quantity[1.3000000000000000444`2.*^19, "Years"]}, {
                 "ununbium-277", 
                  Quantity[1.1`2., "Milliseconds"]}, {"ununbium-277", 
                  Quantity[1.1`2., "Milliseconds"]}, {"ununbium-278", 
                  Quantity[9.9999999999999999999`2., "Milliseconds"]}, {
                 "ununbium-279", 
                  Quantity[100.`2., "Milliseconds"]}, {"ununbium-280", 
                  Quantity[1.`1., "Seconds"]}, {"ununbium-281", 
                  Quantity[10.`2., "Seconds"]}, {"ununbium-281", 
                  Quantity[10.`2., "Seconds"]}, {"ununbium-282", 
                  Quantity[30.`2., "Seconds"]}, {"ununbium-282", 
                  Quantity[30.`2., "Seconds"]}, {"ununbium-283", 
                  Quantity[4.1666666666666666666`3., "Minutes"]}, {
                 "ununbium-283", 
                  Quantity[4.1666666666666666666`3., "Minutes"]}, {
                 "ununbium-284", 
                  Quantity[31.`2., "Seconds"]}, {"ununbium-284", 
                  Quantity[31.`2., "Seconds"]}, {"ununtrium-283", 
                  Quantity[10.`2., "Seconds"]}, {"uranium-221", 
                  Quantity[700.`2., "Nanoseconds"]}, {"vanadium-50", 
                  Quantity[1.39999999999999992`2.*^17, "Years"]}, {
                 "xenon-147", 
                  Quantity[100.0000000000000055518`3., "Milliseconds"]}, {
                 "zinc-77", 
                  Quantity[2.08`3., "Seconds"]}, {"zirconium-100", 
                  Quantity[7.1`2., "Seconds"]}, {"zirconium-109", 
                  Quantity[59.9999999999999999999`2., "Milliseconds"]}},
                SelectWithContents->True,
                Selectable->False], ",", "4"}], "]"}], ",", "Last"}], "]"}]}],
           ";", "\[IndentingNewLine]", 
          RowBox[{"choices", "=", 
           RowBox[{
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
             "&"}], "/@", "data"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"mixed", "=", 
           RowBox[{"RandomSample", "[", "choices", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"ans", "=", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{"mixed", ",", 
              RowBox[{
              "choices", "\[LeftDoubleBracket]", "1", 
               "\[RightDoubleBracket]"}]}], "]"}], "\[LeftDoubleBracket]", 
            RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"q", "=", 
           RowBox[{
            RowBox[{"Hold", "[", 
             RowBox[{"StringForm", "[", 
              RowBox[{
              "\"\<Which of these isotopes has the shortest half-life, at \
just ``?\>\"", ",", "h1"}], "]"}], "]"}], "/.", 
            RowBox[{"h1", "\[Rule]", 
             RowBox[{"data", "\[LeftDoubleBracket]", 
              RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}]}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"InputForm", "[", 
           RowBox[{"{", 
            RowBox[{"q", ",", "ans", ",", "mixed"}], "}"}], "]"}]}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "2", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"data", "=", 
           RowBox[{"RandomSample", "[", 
            RowBox[{
             InterpretationBox[
              DynamicModuleBox[{Typeset`open = False}, 
               TemplateBox[{"Association","AssociationIcon",GridBox[{{
                    RowBox[{
                    TagBox["\"Head: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["Association", "IconizedItem"]}]}, {
                    RowBox[{
                    TagBox["\"Length: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["341", "IconizedItem"]}]}, {
                    RowBox[{
                    TagBox["\"Byte count: \"", "IconizedLabel"], 
                    "\[InvisibleSpace]", 
                    TagBox["96216", "IconizedItem"]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                 Dynamic[Typeset`open]},
                "IconizedObject"]],
              Association[
              "AbbeNumberHelium" -> {
                "helium's Abbe number", 
                 "measures how light of different colors refract differently \
in helium"}, "AbbeNumberMercury" -> {
                "mercury's Abbe number", 
                 "measures how light of different colors refract differently \
in mercury"}, "AcceleratingFrequency" -> {"accelerating frequency", ""}, 
               "AccelerationNumber" -> {
                "acceleration number", 
                 "amount of acceleration applied to an object"}, 
               "Albedo" -> {
                "albedo", 
                 "proportion of incident light that reflects off an object"}, 
               "AlfvenNumber" -> {
                "Alfv\[EAcute]n number", 
                 "characterizes how a conducting fluid flows past a fixed \
object"}, "AngleSubtended" -> {
                "angle subtended", 
                 "measure of an angle connecting two end-points of a curve"}, 
               "AngularDiameter" -> {
                "angle diameter", 
                 "apparent diameter as an angle from the viewer's \
perspective"}, 
               "AngularFrequency" -> {
                "angular frequency", "rotation measure in radians"}, 
               "AnnulusAreaMomentOfInertia" -> {
                "moment of inertia of an annulus", 
                 "how much a flat ring shape resists spinning"}, 
               "AntiKnockIndex" -> {
                "anti-knock index", "measures gasoline octane"}, 
               "ApparentMagnitudeIntensity" -> {
                "apparent magnitude intensity", 
                 "brightness of a star as seen from Earth"}, 
               "ArchimedesNumber" -> {
                "Archimedes number", 
                 "describes how fluids of mixed densities flow"}, 
               "ArrheniusNumber" -> {
                "Arrhenius number", 
                 "how much the speed of a chemical reaction depends on \
temperature"}, 
               "AtkinsonCycle" -> {
                "Atkinson cycle", 
                 "thermal efficiency of an Atkinson cycle engine"}, 
               "AtwoodNumber" -> {
                "Atwood number", "measures instability in stratified fluids"},
                "AvogadrosLaw" -> {
                "Avogadro's Law", 
                 "relates the quantity and volume of two gases"}, 
               "AxialMemberDeformation" -> {
                "axial member deformation", 
                 "how an object deforms under force"}, 
               "BagnoldNumber" -> {
                "Bagnold number", "relates how a granular fluid moves"}, 
               "BaseballBattingAverage" -> {
                "baseball batting average", "batter's efficiency"}, 
               "BaseballGameScore" -> {
                "baseball game score", "pitcher's effectiveness"}, 
               "BaseballIsolatedPower" -> {
                "baseball isolated power", "batter's raw power"}, 
               "BaseballPythagoreanWinExpectancy" -> {
                "Pythagorean win expectancy", 
                 "baseball team's probability of winning"}, 
               "BaseballRangeFactor" -> {
                "baseball range factor", "fielder's effectiveness"}, 
               "BaseballSluggingPercentage" -> {
                "baseball slugging percentage", 
                 "batter effectiveness favoring extra bases"}, 
               "BasketballAssistRate" -> {
                "basketball assist rate", 
                 "player's supporting effectiveness"}, 
               "BasketballEffectiveFieldGoalPercentage" -> {
                "effective field goal percentage", 
                 "basketball shooter's effectiveness"}, 
               "BasketballFieldGoalPercentage" -> {
                "field goal percentage", 
                 "basketball shooter's effectiveness"}, 
               "BasketballTrueShootingPercentage" -> {
                "true shooting percentage", 
                 "basketball shooter's effectiveness"}, 
               "BasketballUsageRate" -> {
                "usage rate", "basketball player's teamwork"}, 
               "BealeNumber" -> {
                "Beale number", "power output of a Sterling engine"}, 
               "BejanNumberHeatTransfer" -> {
                "Bejan number", "measures pressure drop in fluids"}, 
               "BellColemanCycle" -> {
                "Bell Coleman cycle", "refrigeration without condensation"}, 
               "BernoullisEquation" -> {
                "Bernoulli's Equation", "measure of fluid dynamics"}, 
               "BetheFormula" -> {
                "Bethe formula", 
                 "engergy loss of particles traveling through a medium"}, 
               "BimetallicStrip" -> {
                "bimetalic strip", 
                 "how much a layered metal strip will bend"}, 
               "BinghamCompressionNumber" -> {
                "Bingham number", "deformation rate of compressed plastics"}, 
               "BiotNumberHeatTransfer" -> {
                "Biot number", "resistance to heat transfer"}, 
               "BirthdayProblemApproximation" -> {
                "birthday problem", 
                 "probability that a pair of people have the same birthday"}, 
               "BlackHoleHawkingRadiationPower" -> {
                "Hawking radiation", 
                 "how much black-body radiation leaks from a black hole"}, 
               "BlackHoleLifetime" -> {
                "black hole lifetime", "how long a black hole exists"}, 
               "BlasiusBoundaryLayerThickness" -> {
                "Blasius boundary layer thickness", 
                 "fluid moving over a plate"}, 
               "BlasiusDisplacementThickness" -> {
                "Blasius displacement thickness", 
                 "fluid moving over a plate"}, 
               "BlasiusSkinFriction" -> {
                "Blasius skin friction", 
                 "drag of a fluid moving over a plate"}, 
               "BloodOxygen" -> {
                "blood oxygen content", "how much oxygen is in the blood"}, 
               "BodyMassIndex" -> {
                "body mass index", "a measure of body fatness"}, 
               "BondNumber" -> {
                "Bond number or E\[ODoubleDot]tv\[ODoubleDot]s number", 
                 "influence of gravity on drops and bubbles"}, 
               "BoseEinsteinDistribution" -> {
                "Bose-Einstein distribution", 
                 "boson behavior, especially condensation"}, 
               "BoussinesqNumber" -> {
                "Boussinesq number", 
                 "describes the interface between gas and liquid"}, 
               "BoyleNumber" -> {
                "Boyle number", "role of temperature in gas expansion"}, 
               "BoylesLaw" -> {
                "Boyle's law", "role of pressure in gas expansion"}, 
               "BrakingTorque" -> {
                "breaking torque", "force needed to stop a wheel"}, 
               "BraytonCycle" -> {
                "Brayton cycle", "efficiency of a heat engine"}, 
               "BrewsterAngle" -> {
                "Brewster's Angle", 
                 "angle light passes through a surface without reflection"}, 
               "BrinellHardness" -> {
                "Brinell hardness", "resistance to denting"}, 
               "BrinkmanNumber" -> {
                "Brinkman number", "heat transfer from a wall to a fluid"}, 
               "BrinkmanRheologicalNumber" -> {
                "Brinkman rheological number", 
                 "heat transfer from a wall to a fluid"}, 
               "BulkConcentration" -> {
                "bulk concentration", "unaffected concentration of a fluid"}, 
               "CableCapacitance" -> {
                "cable capacitance", 
                 "measure of electrical charges in a cable"}, 
               "Capacitance" -> {
                "capacitance", "how much electricity something can hold"}, 
               "CapacitanceParallel" -> {
                "capacitance parallel", 
                 "total electrical storage of parallel connections"}, 
               "CapacitanceSeries" -> {
                "capacitance series", 
                 "total electrical storage of series connections"}, 
               "CapillaryAction" -> {
                "capillary action", "how high a fluid will go up a straw"}, 
               "CapillaryNumber" -> {
                "capillary number", 
                 "tension in the interface of liquid and gas"}, 
               "CapitalAssetPricingModel" -> {
                "capital asset pricing", "relates cost, capital, and risk"}, 
               "CapitalRecoveryFactor" -> {
                "capital recovery factor", "present value of annuities"}, 
               "CardiacOutput" -> {
                "cardio output", "how much blood the heart pumps over time"}, 
               "CatheterFlowRate" -> {
                "catheter flow rate", 
                 "how fast fluids pass through a catheter"}, 
               "CauchyNumber" -> {
                "Cauchy number", 
                 "measures inertia vs compressability in fluids"}, 
               "CentrifugalPump" -> {
                "centrifugal pump", "power of a pump that spins fluid"}, 
               "ChandrasekharNumber" -> {
                "Chandrasekhar number", 
                 "related to viscosity in magnetic convection"}, 
               "CharlesLaw" -> {
                "Charles' Law", 
                 "relates a gas' volume to its absolute temperature"}, 
               "CircleArcLength" -> {
                "circle arc length" -> 
                 "distance along a curve subtending an angle"}, 
               "CircleArea" -> {
                "circle area", "how much area is enclosed by a circle"}, 
               "CircularCoilMaximalMagneticInduction" -> {
                "coil max magnetic induction", 
                 "induction from a circular coil"}, 
               "CircumferenceForm2" -> {
                "circumference of a circle", 
                 "relates the length of the circle with its radius"}, 
               "CloudBaseHeight" -> {
                "cloud base height", "how high the bottom of the clouds are"},
                "CoaxialCableSelfInductance" -> {
                "coaxial cable self-inductance", 
                 "inductance between the inner wire and the conductor"}, 
               "CohensD" -> {
                "Cohen's d", "compares the effect size of two means"}, 
               "CombinedGasLaw" -> {
                "combined gas law", 
                 "combines Boyle's, Charles', and Gay-Lussac's Laws"}, 
               "CommodityContractsOptimalNumber" -> {
                "commodity contracts optimum", 
                 "investment calculation for hedge commodities"}, 
               "ComplementProbability" -> {
                "complement probability", 
                 "relates a probability with its complement"}, 
               "CompoundAnnualGrowthRate" -> {
                "compound annual growth" -> 
                 "annualized growth rate over time"}, 
               "ComptonWavelength" -> {
                "Compton wavelength", 
                 "wavelength of a photon of equivalent energy"}, 
               "ConcentrationConversion" -> {
                "concentration conversion", 
                 "relates molerity, mass, and concentration"}, 
               "ContinuousCapitalRecoveryFactor" -> {
                "capital recovery factor", "calculation for annuity returns"},
                "CowlingNumber1" -> {
                "Cowling number", 
                 "charged fluid's motion around a fixed object"}, 
               "CuboidMomentOfInertia" -> {
                "moment of inertia of a cuboid", 
                 "box shape's resistance to spin"}, 
               "CyclotronFrequency" -> {
                "cyclotron frequency", "electron motion in a magnetic field"},
                "DeanNumber" -> {
                "Dean number", "motion of fluids in curved conduits"}, 
               "DieselCycle" -> {
                "diesel cycle", "efficiency of a diesel engine"}, 
               "DifferentialGearRatio" -> {
                "differential gear ratio", 
                 "how fast a car's drive shaft turns"}, 
               "DittusBoelterEquation" -> {
                "Dittus-Boelter equation", 
                 "how much a fluid will heat a pipe"}, 
               "DividendDiscountModel" -> {
                "dividend discount model", "a stock price prediction tool"}, 
               "DolbearsLaw" -> {
                "Dolbear's law", 
                 "relates the chirping of crickets to air temperature"}, 
               "DopplerBlueshift" -> {
                "Doppler blue-shift", 
                 "how much an approaching object changes color"}, 
               "DopplerRedshift" -> {
                "Doppler red-shift", 
                 "how much a receding object changes color"}, 
               "DoyleLogRule" -> {
                "Doyle log rule", "estimate of the volume of a wood log"}, 
               "DragCoefficient" -> {
                "drag coefficient", "how much an object is slowed in fluid"}, 
               "DrakeEquation" -> {
                "Drake equation", 
                 "probability of intelligent extraterrestrials"}, 
               "DrivingDistanceSpeedTime" -> {
                "driving distance", "how far based on how long and how fast"},
                "DurationBasedHedgeRatio" -> {
                "duration-based hedge ratio", 
                 "an investment strategy calculation"}, 
               "EarthCircularOrbitPeriod" -> {
                "Earth circular orbit period", 
                 "measures the Earth's orbital speed"}, 
               "EarthquakeDowndipRuptureWidth" -> {
                "earthquake downdip rupture", 
                 "empirical measure of quake severity"}, 
               "EarthquakeFaultSlipRate" -> {
                "earthquake fault slip rate", 
                 "measure of how often a quake will occur"}, 
               "EarthquakeRuptureArea" -> {
                "earthquake rupture area", 
                 "how widespread quake damage extends"}, 
               "EarthquakeRuptureLength" -> {
                "earthquake rupture length", "how far quake damage extends"}, 
               "EckertNumber" -> {
                "Eckert number", 
                 "measures the self-heating of high speed fluids"}, 
               "EconomicValueAdded" -> {
                "economic value added", "measures a company's profit"}, 
               "EkmanNumber" -> {
                "Ekman number", 
                 "how much air is influenced by Earth's rotation"}, 
               "ElectricalEnergy" -> {
                "electrical energy", "energy from an electrical source"}, 
               "EllipseArea" -> {
                "area of an ellipse", 
                 "measures what is enclosed by an ellipse"}, 
               "EllipseEccentricity" -> {
                "eccentricity of an ellipse", 
                 "how squashed an ellipse is compared to a circle"}, 
               "EllipsoidVolume" -> {
                "ellipsoid volume", "measure of what's inside an ellipsoid"}, 
               "EllipticalLaminaMomentOfInertia" -> {
                "elliptical lamina moment of inertia", 
                 "an elliptical wafer's resistance to spin"}, 
               "EnergyEfficiency" -> {
                "energy efficiency", 
                 "how much energy it takes to do some work"}, 
               "EricssonCycle" -> {
                "Ericsson cycle", "efficiency of a heat engine"}, 
               "ErlangB" -> {
                "Erlang-B formula", 
                 "probability of failure of parallel resources"}, 
               "ErlangC" -> {
                "Erlang-C formula", 
                 "predicts how busy a call center will get"}, 
               "EscapeVelocity" -> {
                "escape velocity", "speed needed to overcome gravity"}, 
               "EulerCharacteristic" -> {
                "Euler characteristic", 
                 "describes the shape of a topological space"}, 
               "ExposureValue" -> {
                "exposure value", 
                 "how much light is collected in a photograph"}, 
               "FirstLawOfThermodynamics" -> {
                "first law of thermodynamics", 
                 "balance of a closed system's heat"}, 
               "FirstOrderArrheniusEquation" -> {
                "first order Arrhenius equation", 
                 "relates heat with the rate of a chemical reaction"}, 
               "FluidColumnPressure" -> {
                "fluid column pressure", 
                 "pressure of a fluid related to its depth"}, 
               "FNumber" -> {
                "f-number", "relates a camera's aperature and focal length"}, 
               "FourierNumberMassTransfer" -> {
                "Fourier number mass transfer", 
                 "transfer of heat from one substance to another"}, 
               "FouriersLaw" -> {
                "Fourier's law", 
                 "transfer of heat from one substance to another"}, 
               "FreeWaterDeficit" -> {
                "free water deficit", "how dehydrated a person is"}, 
               "FrequencyPeriodRelation" -> {
                "frequency-period relationship", 
                 "how often related to how long"}, 
               "FresnelNumber" -> {
                "Fresnel number", 
                 
                 "relates aperture to the wavelength of light passing \
through"}, "FroudeNumber" -> {
                "Froude number", "relates a fluid's weight and inertia"}, 
               "GayLussacNumber" -> {
                "Gay-Lussac number", 
                 "relates the pressure and temperature of a gas"}, 
               "GayLussacsLaw" -> {
                "Gay-Lussac's law", 
                 "relates the pressure and temperature of two gases"}, 
               "GlassDelta" -> {"Glass's delta", "effect size of an event"}, 
               "GraetzNumber" -> {
                "Graetz number", 
                 "how fluids heat up when entering a conduit"}, 
               "GrashofNumber" -> {
                "Grashof number", 
                 "relates viscosity and buoyancy in thermodynamics"}, 
               "GravitationalPotentialEnergy" -> {
                "gravitational potential energy", 
                 "an object's potential to fall"}, 
               "GravitationalRedshift" -> {
                "gravitational redshift", 
                 "slowing of time in a gravitational well"}, 
               "GrossDomesticProductExpenditures" -> {
                "gross domestic product expenditures", 
                 "GDP as a sum of money spent"}, 
               "GrossDomesticProductIncome" -> {
                "gross domestic product income", 
                 "GDP as a sum of inflowing money"}, 
               "GrossDomesticProductValueAdded" -> {
                "gross domestic product value added", 
                 "GDP as price minus cost of all goods"}, 
               "HalfDiskAreaMomentOfInertia" -> {
                "half disk moment of inertia", 
                 "a flat half-disk's resistance to spin"}, 
               "HamCookingTime" -> {
                "ham cooking time", "how long it takes to cook a ham"}, 
               "HartmannNumber" -> {
                "Hartmann number", 
                 "relates a fluid's viscosity to its electromagnetic charge"},
                "HazenWilliamsEquation" -> {
                "Hazen Williams equation", 
                 "relates the properties of a pipe to the flow of water"}, 
               "HeatEngineEfficiency" -> {
                "heat engine efficiency", 
                 "how well a heat engine will perform"}, 
               "HedgeEffectiveness" -> {
                "hedge effectiveness", 
                 "alignment of an investment instrument with fair value"}, 
               "HelmholtzResonatorFrequency" -> {
                "Helmholtz resonator frequency", 
                 "effect of blowing the opening of a bottle"}, 
               "HexagonAreaMomentOfInertia" -> {
                "hexagonal area moment of inertia", 
                 "a hexagon's resistance to spin"}, 
               "HohmannAngularAlignment" -> {
                "Hohmann angular alignment", "maneuver for changing orbits"}, 
               "HydraulicConductivity" -> {
                "hydraulic conductivity", 
                 "how easily fluid passes through a material"}, 
               "HyperfocalDistance" -> {
                "hyperfocal distance", 
                 "minimum focal distance that keeps horizon sharp"}, 
               "HypsometricEquation" -> {
                "hypsometric equation", 
                 "measures thickness of atmospheric layers"}, 
               "IdealSolenoidMagneticInduction" -> {
                "ideal solenoid induction", "magnetic induction calculation"},
                "IlluminanceFromLuminousIntensity" -> {
                "illuminance from intensity", 
                 "conversion between measures of brightness"}, 
               "Impulse" -> {"impulse", "change in momentum"}, 
               "InductiveReactance" -> {
                "inductive reactance", 
                 "impedance when electrical flow is rerouted"}, 
               "InfinitelyLongWire" -> {
                "infinitely long wire", 
                 "magnetic field for an idealized electrical wire"}, 
               "IntrinsicPermeability" -> {
                "intrinsic permeability", 
                 "how easily fluid passes through a fabric"}, 
               "IVInfusionRate" -> {
                "IV infusion", "how much medicine is delivered in an IV"}, 
               "JohnsonNyquistNoisePowerSpectralDensity" -> {
                "Johnson-Nyquist noise", 
                 "power spectral density of J-N noise"}, 
               "JohnsonNyquistNoiseVoltage" -> {
                "Johnson-Nyquist noise voltage", "voltage of J-N noise"}, 
               "KeplersFirstLaw" -> {
                "Kepler's first law", 
                 "the sun is at a focus of a planet's orbit's ellipse"}, 
               "KineticEnergy" -> {
                "kinetic energy", "energy due to motion of an object"}, 
               "KineticFrictionCoefficient" -> {
                "kinetic friction coefficient", 
                 "friction after an object starts sliding"}, 
               "KnoopHardness" -> {
                "Knoop hardness", "how much a diamond can dent a material"}, 
               "KnudsenNumber" -> {
                "Knudsen number", "determinant in fluid dynamics"}, 
               "LarmorPower" -> {
                "Larmor power", "power of an accelerating point charge"}, 
               "LawOfCosines" -> {
                "law of cosines", "a way to solve triangles"}, 
               "LawOfHaversines" -> {
                "law of Haversines", "a way to solve spherical triangles"}, 
               "LawOfSines" -> {"law of sines", "a way to solve triangles"}, 
               "LawOfTangents" -> {
                "law of tangents", "a way to solve triangles"}, 
               "LengthContractionRelativistic" -> {
                "relativistic length contraction", 
                 "shrinking of fast moving objects in relativity"}, 
               "LenoirCycle" -> {
                "Lenoir cycle", "efficiency of a pulse jet engine"}, 
               "LeverMechanicalAdvantage" -> {
                "lever mechanical advantage", "how much a lever will help"}, 
               "LiftCoefficient" -> {
                "lift coefficient", "how much a rigid body lifts a fluid"}, 
               "LightAberrationRelativistic" -> {
                "relativistic aberration of light", 
                 "how light is distorted in relativity"}, 
               "LineSlope" -> {
                "slope of a line", "how much a line is slanted"}, 
               "LogOddsRatio" -> {"log odds ratio", "likeliness of success"}, 
               "LorentzFactor" -> {
                "Lorentz factor", 
                 "relates time, length, and mass in relativity"}, 
               "LorentzNumber" -> {
                "Lorentz number", 
                 "relates the electrical potential of a fluid to its \
temperature"}, 
               "LuminosityAbsoluteMagnitude" -> {
                "luminosity absolute magnitude", 
                 "how much radiation a star emits"}, 
               "LuminosityApparentMagnitudeDistance" -> {
                "luminosity apparent magnitude", 
                 "star's brightness related to distance"}, 
               "LuminosityDistance" -> {
                "luminosity distance", 
                 "how far a star is based on its brightness"}, 
               "LuminosityEnergy" -> {
                "luminosity energy", 
                 "energy output of a star based on its brightness"}, 
               "MachNumber" -> {
                "Mach number", 
                 "speed of an object related to the speed of sound"}, 
               "MagneticEnergyDensity" -> {
                "magnetic energy density", 
                 "concentration of magnetic energy"}, 
               "MagneticReynoldsNumber" -> {
                "magnetic Renolds number", 
                 "indicates the dynamic behavior or plasma"}, 
               "MassDensity" -> {
                "mass density", "ordinary density of a material"}, 
               "MassLuminosityRelationship" -> {
                "mass luminosity relationship", 
                 "relates the mass of a star with its luminosity"}, 
               "MechanicalStress" -> {
                "mechanical stress", "force within a continuous material"}, 
               "MinimumPowerRequiredToMoveObject" -> {
                "minimum power required to move", "how much force is needed"},
                "MinimumVarianceHedgeRatio" -> {
                "minimum variance hedge ratio", 
                 "tool for investment banking"}, 
               "ModifiedInternalRateOfReturn" -> {
                "modified internal rate of return", 
                 "rate of return with interest"}, 
               "ModulusRelation" -> {
                "modulus relation", 
                 "change in width of a stretched or compressed object"}, 
               "MohrCoulombFailureCriterion" -> {
                "Mohr-Coulomb failure criterion", 
                 "predicts the failure of isotropic materials"}, 
               "MolarityDensityConversion" -> {
                "molarity density conversion", 
                 "translates between moles and grams per liter"}, 
               "MomentOfInertiaRatio" -> {
                "moment of inertia ratio", 
                 "optimizes servo motors and other machines"}, 
               "MonoproticStrongAcidBaseTitration" -> {
                "monoprotic strong acid base titration", 
                 "for reactions between acids and bases"}, 
               "MorseEquation" -> {
                "Morse equation", "potential energy of a diatomic molecule"}, 
               "NegativePredictiveValue" -> {
                "negative predictive value", 
                 "how accurate negative test results are"}, 
               "NewtonsLawOfCooling" -> {
                "Newton's law of cooling", "how fast things cool off"}, 
               "NewtonsLawOfUniversalGravitation" -> {
                "Newton's law of universal gravitation", 
                 "things attract each other based on mass"}, 
               "NewtonsSecondLawConstantMass" -> {
                "Newton's second law", 
                 "defines force in terms of acceleration and mass"}, 
               "NominalToEffectiveInterestRate" -> {
                "nominal to effective interest rate", 
                 "compound interest as if it were simple interest"}, 
               "NominalToEffectiveInterestRateContinuous" -> {
                "continual to effective interest rate", 
                 "continuous compound interest in terms of simple interest"}, 
               "NormalizedFrequency" -> {
                "normalized frequency", 
                 "adjusted to match the sample frequency"}, 
               "NozzlePressureDrop" -> {
                "nozzle pressure drop", "for fluids in conduits"}, 
               "NusseltNumberHeatTransfer" -> {
                "Nusselt number heat transfer", 
                 "convective versus conductive transfer"}, 
               "OddsRatio" -> {
                "odds ratio", "amount of dependence between two events"}, 
               "OhmsLaw" -> {
                "Ohm's law", "fundamental relationship for electricity"}, 
               "OttoCycle" -> {
                "Otto cycle", "for spark ignition piston engines"}, 
               "OxygenIndex" -> {
                "oxygen index", "how much oxygen a person is using"}, 
               "PageSpeed" -> {"page speed", "how fast a web page loads"}, 
               "ParallaxDistance" -> {
                "parallax distance", "how far heavenly bodies are"}, 
               "ParallelAxisTheorem" -> {
                "parallel axis theorem", 
                 "moment of inertia that is not center of mass"}, 
               "ParallelWiresSelfInductance" -> {
                "parallel wires self-inductance", 
                 "how two electrical wires affect each other"}, 
               "PaschensLaw" -> {
                "Paschen's law", "voltage needed to arc a gap"}, 
               "PecletNumberMassTransfer" -> {
                "Peclet number mass transfer", 
                 "for temperature of a moving fluid"}, 
               "PentagonAreaMomentOfInertia" -> {
                "pentagon moment of inertia", 
                 "a pentagon area's resistance to spin"}, 
               "PlantAllometryTrunkDiameterHeight" -> {
                "plant allometry trunk diameter height", 
                 "for the size and shape of trees"}, 
               "pOH" -> {
                "solution alkalinity", "for hydroxide ion concentration"}, 
               "PointMassMomentOfInertia" -> {
                "point mass moment of inertia", 
                 "fundamental case for moment of inertia"}, 
               "PoissonRatio" -> {
                "Poisson's Ratio", 
                 "thinning or thickening in the middle of a deformed object"},
                "PolarToCartesian" -> {
                "polar to cartesian", "2D coordinate systems"}, 
               "PooledStandardDeviation" -> {
                "pooled standard deviation", "weights favor larger groups"}, 
               "PooledVariance" -> {
                "pooled variance", "weights favor larger groups"}, 
               "PopulationGrowth" -> {
                "population growth", "um... population growth"}, 
               "PositivePredictiveValue" -> {
                "positive predictive value", 
                 "confidence in a positive test result"}, 
               "PowerResistanceCurrent" -> {
                "power resistance current", 
                 "calculation for electrical power"}, 
               "PresentValueFutureValueContinuous" -> {
                "continuous compounding", 
                 "relates present and future values"}, 
               "PresentValueFutureValueContinuousDates" -> {
                "continuous compounding between dates", 
                 "relates present and future values"}, 
               "Pressure" -> {"pressure", "as in gas or liquid"}, 
               "Prevalence" -> {"prevalence", "an epidemiology calculation"}, 
               "ProjectileSlantRange" -> {
                "projectile slant range", "how far a cannonball can fly"}, 
               "PulleySystemMechanicalAdvantage" -> {
                "pulley system mechanical advantage", 
                 "how much a simple pulley helps"}, 
               "PythagoreanTheorem" -> {
                "Pythagorean theorem", "length of a hypotenuse"}, 
               "QuadraticEquation" -> {
                "quadratic equation", 
                 "symbolic form for quadratic equations"}, 
               "QuarterDiskAreaMomentOfInertia" -> {
                "quarter disk area inertia", 
                 "moment of inertia for a quarter disk area"}, 
               "RadioHorizonDistance" -> {
                "radio horizon distance", "antenna to antenna max distance"}, 
               "RangeToAircraft" -> {
                "range to aircraft", 
                 "how far away an airplain is from an observer"}, 
               "RankineCycle" -> {
                "Rankine cycle", "efficiency of a steam engine"}, 
               "Rapidity" -> {
                "rapidity", "measure of velocity in relativity"}, 
               "RealRateOfReturn" -> {
                "real rate of return", 
                 "investment return after accounting for inflation"}, 
               "RectangleArea" -> {
                "rectangle area", 
                 "how big is the region contained in a rectangle"}, 
               "RectangleAreaMomentOfInertia" -> {
                "rectangle area moment of inertia", 
                 "a rectangle's resistance to spin"}, 
               "RedlichKwongEquation" -> {
                "Redlich-Kwong equation", 
                 "relates pressure and volume in hot gases"}, 
               "RedshiftRelativistic" -> {
                "relativistic redshift", 
                 "light from receding object near the speed of light"}, 
               "ReducedMass" -> {
                "reduced mass", "simplification to solve the 2-body problem"},
                "RefractiveIndex" -> {
                "refractive index", 
                 "how much light \"bends\" in a transparent material"}, 
               "RegularNGonArea" -> {
                "regular n-gon area", 
                 "area of a regular polygon with n sides"}, 
               "RelativeGrahamValue" -> {
                "relative Graham value", "whether a stock is worth buying"}, 
               "Resistance" -> {
                "resistance", 
                 "fundamental measure of electrical conductivity"}, 
               "ResistanceParallel" -> {
                "resistance in a parallel system", 
                 "measures resistance in a parallel system"}, 
               "ResistanceSeries" -> {
                "resistance in a serial system", 
                 "measures resistance in series"}, 
               "Resistivity" -> {
                "resistivity", 
                 "how much a material resists letting electricity flow"}, 
               "RespiratoryQuotient" -> {
                "respiratory quotient", 
                 "balance of chemicals while food is metabolized"}, 
               "RichardsonNumber" -> {
                "Richardson number", "air turbulence measure for aviators"}, 
               "RichterScaleMagnitudeDefinition" -> {
                "Richter scale magnitude", "the strength of an earthquake"}, 
               "RichterScaleMagnitudeToEnergy" -> {
                "Richter scale to energy", "convert magnitude to energy"}, 
               "RightTriangleSides" -> {
                "right triangle leg lengths", 
                 "lenghts of sides a and b in a right triangle"}, 
               "RigidBodyAngularMomentum" -> {
                "rigid body angular momentum", 
                 "impetus to continue spinning"}, 
               "RocketEquation" -> {
                "Tsiolkovsky rocket equation", 
                 "rocket goes forward by expelling gas backward"}, 
               "RollingFrictionCoefficient" -> {
                "rolling friction coefficient", 
                 "friction on rolling objects"}, 
               "RossbyNumber" -> {
                "Rossby number", 
                 "relates atmospheric momentum to the Coriolis force"}, 
               "RotationalKineticEnergy" -> {
                "rotational kinetic energy", 
                 "object's energy while spinning"}, 
               "RotationalPower" -> {
                "rotational power", "power of an object that is spinning"}, 
               "RuleOfSeventy" -> {
                "rule of 70", "how long it takes an investment to double"}, 
               "RydbergFormula" -> {
                "Rydberg formula", "wavelength of light from an excited gas"},
                "SampleSizeForPopulationMean" -> {
                "sample size for population mean", 
                 "for statistical analysis"}, 
               "SandCastleStability" -> {
                "sand castle stability", 
                 "how tall can a sand castle structure be built"}, 
               "ScribnerLogRule" -> {
                "Scribner log rule", 
                 "how many boards can be cut from a tree"}, 
               "SeagerEquation" -> {
                "Seager equation", 
                 "posibility of life on a planet based on its gases"}, 
               "SecondOrderArrheniusEquation" -> {
                "2nd order Arrhenius equation", 
                 "chemical reaction rates based on temperature"}, 
               "Sensitivity" -> {
                "sensitivity", "how sensitive a test is (medicine)"}, 
               "SeriesResistorCapacitorCircuit" -> {
                "series resistor/capacitor circuit", 
                 "electrical circuit calculation"}, 
               "SeriesResistorInductorCircuit" -> {
                "series resistor/inductor circuit", 
                 "electrical circuit calculation"}, 
               "SimpleInterest" -> {
                "simple interest", "non-compounded interest calculation"}, 
               "SingleLayerCircularCoilSelfInductance" -> {
                "1-layer circular coil self-inductance", 
                 "electrical inductance in a coil"}, 
               "SodiumDeficit" -> {
                "sodium deficit", "medical measure of chemical imbalance"}, 
               "SolidEllipsoidMomentOfInertia" -> {
                "solid ellipsoid moment of inertia", 
                 "ellipsoid's resistance to spin"}, 
               "Specificity" -> {
                "specificity", "how specific a test is (medicine)"}, 
               "SpectralLineNaturalBroadening" -> {
                "spectral line natural broadening", 
                 "astronomical measure for wider-than-expected spectral \
lines"}, "SphereMomentOfInertia" -> {
                "sphere moment of inertia", "sphere's resistance to spin"}, 
               "SphericalLawOfSines" -> {
                "spherical law of sines", 
                 "solves triangles on the surface of a sphere"}, 
               "SphericalLawOfTangents" -> {
                "spherical law of tangents", 
                 "solves triangles on the surface of a sphere"}, 
               "SpheroidVolume" -> {
                "spheroid volume", 
                 "a spheroid is a squashed or stretched sphere"}, 
               "SpringConstant" -> {
                "spring constant", "stretchiness of a spring"}, 
               "SpringMaximumForce" -> {
                "maximum spring force", "how much a spring can hold"}, 
               "SpringMaximumShearStress" -> {
                "maximum spring shear stress", 
                 "measure of tension in a spring"}, 
               "StantonNumber" -> {
                "Stanton number", 
                 "incoming heat versus thermal capacity of a fluid"}, 
               "StefanBoltzmannLaw" -> {
                "Stefan-Boltzmann law", 
                 "power of a black body emission versus temperature"}, 
               "StockContractsOptimalNumber" -> {
                "stock contracts optimal number", "investment calculation"}, 
               "StokesFlow" -> {
                "Stokes flow", "creeping behavior in fluid dynamics"}, 
               "StrehlRatio" -> {
                "Strehl ratio", 
                 "measure of the quality of manufactured lenses"}, 
               "StringWavePropagation" -> {
                "string wave propagation", "waves on a string"}, 
               "StrouhalNumber" -> {
                "Strouhal number", 
                 "in fluid dynamics, a measure of vortex formation"}, 
               "SubjectMagnification" -> {
                "subject magnification", "photograph metric"}, 
               "SuratmanNumber" -> {
                "Suratman number", 
                 "fluid dynamics metric related to surface tension"}, 
               "SutherlandFormula" -> {
                "Sutherland formula", "measures viscosity in fluid dynamics"},
                "SwellingInterfaceNumber" -> {
                "Swelling interface number", 
                 "chemical metric useful in polymer production"}, 
               "SynchronousSpeed" -> {
                "synchronous speed", 
                 "how fast a motor's electrical field is spinning"}, 
               "TelescopeLightGatheringPower" -> {
                "light gathering power", 
                 "how much light a telescope can collect"}, 
               "TelescopeMagnifyingPower" -> {
                "magnifying power", 
                 "how much a telescope magnifies an image"}, 
               "ThermalDeformation" -> {
                "thermal deformation", 
                 "how much an object expands or shrinks with varying \
temperature"}, 
               "ThermalSpeed" -> {
                "thermal speed", "how fast heat travels in a medium"}, 
               "ThermodynamicEnergy" -> {
                "thermodynamic energy", "energy in a thermodynamic system"}, 
               "ThinFilmInterferenceConstructive" -> {
                "constructive interference in a film", 
                 "amplifying waves in a thin film"}, 
               "ThinFilmInterferenceDestructive" -> {
                "destructive interference in a film", 
                 "canceling waves in a thin film"}, 
               "ThinLensEquation" -> {
                "thin lens equation", 
                 
                 "relates the focal length to the object and image \
distances"}, "TimeDilationRelativistic" -> {
                "relativistic time dilation", 
                 "stretch of time in relativity"}, 
               "TorricellisTheorem" -> {
                "Torricelli's theorem", 
                 "how fast fluid leaks out of a container"}, 
               "Torsion" -> {"torsion", "how much an object is twisted"}, 
               "TorusVolume" -> {
                "torus volume", "how much space is inside a doughnut shape"}, 
               "TranstubularPotassiumGradient" -> {
                "transtubular potassium gradient", 
                 "kidney health based on urine chemistry"}, 
               "TrapezoidArea" -> {
                "trapezoid area", "how much is contained in a trapezoid"}, 
               "TrapezoidAreaMomentOfInertia" -> {
                "trapezoid moment of inertia", 
                 "trapezoid area's resistance to spin"}, 
               "TriangleAreaBH" -> {
                "area of a triangle", 
                 "how much is contained in a 3-sided polygon"}, 
               "TriangleAreaMomentOfInertia" -> {
                "triangle area moment of inertia", 
                 "how resistant to spin is a triangle area"}, 
               "TriangularPlateMomentOfInertia" -> {
                "triangular plate moment of inertia", 
                 "resistance to spin for a triangle-shaped plate"}, 
               "TurkeyFryingTime" -> {
                "turkey frying time", "how long a turkey should be fried"}, 
               "TurkeySmokingTime" -> {
                "turkey smoking time", "how long a turkey should be smoked"}, 
               "TwoInfinitelyLongParallelWires" -> {
                "2 long parallel wires", 
                 "interaction of electrical and magnetic forces"}, 
               "TwoUnionProbability" -> {
                "union probability", 
                 "likelihood of either of two evens happening"}, 
               "UniformDensitySphereGravitationalBindingEnergy" -> {
                "universal density sphere", "gravitational binding energy"}, 
               "VanDerWaalsEquation" -> {
                "VanDerWaals equation", 
                 "metric in the physical properties of gases"}, 
               "VectorProjection" -> {
                "vector projection", 
                 "one vector \"casting a shadow\" on another"}, 
               "VelocityAdditionRelativistic" -> {
                "relativistic velocity addition", 
                 "apparent velocity near the speed of light"}, 
               "VickersHardness" -> {
                "Vickers harness", 
                 "metrics from denting something with a diamond"}, 
               "Viscosity" -> {"viscosity", "gooiness"}, 
               "WaterHammerFast" -> {
                "fast water hammer", "metric for vibrating pipes"}, 
               "WaterHammerSlow" -> {
                "slow water hammer", "measure of pounding in pipes"}, 
               "WeberNumber" -> {
                "Weber number", "metric in dynamics when fluids mix"}, 
               "WeightedAverageCostOfCapital" -> {
                "weighted average cost of capital", 
                 "how much a company pays to finance assets"}, 
               "WheelAndAxleMechanicalAdvantage" -> {
                "wheel-axle advantage", 
                 "mechanical advantage in a system with a wheel and axle"}, 
               "WindTurbine" -> {
                "power of a wind turbine", 
                 "how much electricity a \"windmill\" can generate"}, 
               "WordSpeed" -> {
                "word speed", "typed, spoken, read, transmitted..."}, 
               "YoungsModulus" -> {"Young's modulus", "measures stiffness"}, 
               "ZeissFormula" -> {
                "Zeiss formula", 
                 "determines a circle of confusion in photography"}, 
               "ZernikeOpticalAberration" -> {
                "Zernike optical aberration", 
                 "measures light distortion in telescope lenses"}],
              SelectWithContents->True,
              Selectable->False], ",", "4"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"q", "=", 
           RowBox[{"StringForm", "[", 
            RowBox[{"\"\<What formula is this?\\n`1`\>\"", ",", 
             RowBox[{"Style", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"FormulaData", "[", 
                 RowBox[{
                  RowBox[{"Keys", "[", "data", "]"}], "\[LeftDoubleBracket]", 
                  "1", "\[RightDoubleBracket]"}], "]"}], "/.", 
                RowBox[{
                 RowBox[{"QuantityVariable", "[", 
                  RowBox[{"a_", ",", "_"}], "]"}], "\[Rule]", "a"}]}], ",", 
               "42", ",", 
               RowBox[{"Darker", "[", "Blue", "]"}]}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"qTransit", "=", 
           RowBox[{
            RowBox[{"Hold", "[", 
             RowBox[{"ToExpression", "[", 
              RowBox[{"FromCharacterCode", "[", "h1", "]"}], "]"}], "]"}], "/.", 
            RowBox[{"h1", "\[Rule]", 
             RowBox[{"ToCharacterCode", "[", 
              RowBox[{"ToString", "[", 
               RowBox[{"InputForm", "[", "q", "]"}], "]"}], "]"}]}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"choices", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"Tooltip", "[", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
              "]"}], "&"}], "/@", 
            RowBox[{"Values", "[", "data", "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"mixed", "=", 
           RowBox[{"RandomSample", "[", "choices", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"ans", "=", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{"mixed", ",", 
              RowBox[{
              "choices", "\[LeftDoubleBracket]", "1", 
               "\[RightDoubleBracket]"}]}], "]"}], "\[LeftDoubleBracket]", 
            RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"InputForm", "[", 
           RowBox[{"{", 
            RowBox[{"qTransit", ",", "ans", ",", "mixed"}], "}"}], "]"}]}]}], 
        "]"}], "&"}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
   "\"\<CS_pack_Phys6\>\"", ",", 
   RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.686006720128652*^9, 3.686006741062894*^9}, {
   3.686008479666642*^9, 3.686008579877762*^9}, 3.686008646209092*^9, {
   3.686008716355199*^9, 3.6860087567900753`*^9}, 3.686008787823545*^9, {
   3.686008887493989*^9, 3.686008919175447*^9}, {3.686009029181423*^9, 
   3.6860090465628223`*^9}, {3.686009113758634*^9, 3.6860092318339148`*^9}, {
   3.686009280494164*^9, 3.6860093364568787`*^9}, {3.6860094199646606`*^9, 
   3.686009437371706*^9}, {3.686009578629781*^9, 3.686009593376667*^9}, {
   3.6860100111865797`*^9, 3.686010014778619*^9}, {3.6860100492764053`*^9, 
   3.6860100858792753`*^9}, {3.686059270887102*^9, 3.6860592952234163`*^9}, {
   3.686059380190322*^9, 3.686059414169595*^9}, {3.686059526187031*^9, 
   3.686059532151293*^9}, {3.68606047439318*^9, 3.6860604887116823`*^9}, {
   3.6876207469717283`*^9, 3.6876208043563766`*^9}, {3.687621054582975*^9, 
   3.687621060584649*^9}, {3.791915112731139*^9, 3.7919152666395082`*^9}, {
   3.791916301779994*^9, 3.791916439913089*^9}, {3.791916595417487*^9, 
   3.791916618600102*^9}, {3.7919167793527813`*^9, 3.791916801999185*^9}, {
   3.7919169402479687`*^9, 3.791916974334358*^9}, {3.791917122839858*^9, 
   3.791917153885213*^9}, {3.791917184702508*^9, 3.791917194508812*^9}, {
   3.791917367804834*^9, 3.791917410340057*^9}, {3.791917534453107*^9, 
   3.79191757786712*^9}, {3.791917747891626*^9, 3.791917831266307*^9}, {
   3.791917872418477*^9, 3.791917886580801*^9}, {3.791917967543577*^9, 
   3.791918017470192*^9}, {3.7919180632633867`*^9, 3.7919180941994257`*^9}, {
   3.7919181249750423`*^9, 3.791918142237645*^9}, {3.7919182253340816`*^9, 
   3.7919182322057323`*^9}, {3.791918269455001*^9, 3.791918284517453*^9}, {
   3.7919183547816477`*^9, 3.791918368309514*^9}, {3.7919184738700933`*^9, 
   3.791918493612526*^9}, {3.791918609725696*^9, 3.791918647939951*^9}, {
   3.7919187228543262`*^9, 3.791918751227734*^9}, {3.7919190042918663`*^9, 
   3.791919040100013*^9}, {3.791919139706706*^9, 3.7919191889142323`*^9}, {
   3.791926685897209*^9, 3.791926693048963*^9}, {3.791926748233222*^9, 
   3.791926773960904*^9}, {3.7919268066167507`*^9, 3.791926981767972*^9}, {
   3.791927201271509*^9, 3.7919272063848877`*^9}, {3.7919275051673*^9, 
   3.791927508614831*^9}, {3.791927637751747*^9, 3.791927773461306*^9}, {
   3.791927804812954*^9, 3.791927831021093*^9}, {3.791927957580379*^9, 
   3.791928060331667*^9}, {3.791928100235772*^9, 3.7919281110360107`*^9}, {
   3.791928178508457*^9, 3.7919282181469927`*^9}, {3.791928278988874*^9, 
   3.791928372395178*^9}, {3.791928453051976*^9, 3.791928479930353*^9}, 
   3.7919285465298433`*^9, {3.7919285829135733`*^9, 3.7919285874813957`*^9}, {
   3.791928659465068*^9, 3.791928710576973*^9}, {3.7919287521133337`*^9, 
   3.791928802497065*^9}, {3.791928850729433*^9, 3.791928864928712*^9}, {
   3.791928932128476*^9, 3.791929010095962*^9}, {3.7919290585678263`*^9, 
   3.79192910175126*^9}, {3.791972428205426*^9, 3.791972468139329*^9}, {
   3.791972515404895*^9, 3.791972520666853*^9}, {3.791972569364369*^9, 
   3.791972642522481*^9}, {3.791972678187076*^9, 3.791972862388173*^9}, {
   3.79197295698145*^9, 3.791973020668251*^9}, {3.791973145420834*^9, 
   3.791973281450933*^9}, {3.791973338419134*^9, 3.791973351258697*^9}, {
   3.791973467019733*^9, 3.7919735532581797`*^9}, {3.791973634659114*^9, 
   3.7919736574099894`*^9}, {3.791973709306304*^9, 3.7919737166977262`*^9}, {
   3.791973756803177*^9, 3.7919737869455423`*^9}, {3.791973858289507*^9, 
   3.791973928953032*^9}, {3.791973963633514*^9, 3.791973965890319*^9}, {
   3.7919740255289793`*^9, 3.791974212855974*^9}, {3.791974254665296*^9, 
   3.791974326487606*^9}, {3.7919744065608892`*^9, 3.7919744526395617`*^9}, {
   3.791974511408903*^9, 3.791974568310945*^9}, {3.7919745993204727`*^9, 
   3.791974617078824*^9}, {3.791974726638895*^9, 3.791974762054311*^9}, {
   3.791974794255413*^9, 3.791974807895093*^9}, {3.791974948038129*^9, 
   3.791974979875423*^9}, {3.791975012048345*^9, 3.791975016645309*^9}, {
   3.7919752603666153`*^9, 3.7919753017560797`*^9}, {3.791975400165921*^9, 
   3.7919754657242947`*^9}, {3.791975583900898*^9, 3.791975644539291*^9}, {
   3.791978404418511*^9, 3.791978436329166*^9}, {3.791978539585734*^9, 
   3.791978552392807*^9}, {3.7919786672896214`*^9, 3.7919787278719683`*^9}, {
   3.791978827061021*^9, 3.791978861009078*^9}, {3.791978898817198*^9, 
   3.79197891870497*^9}, {3.7919790408577642`*^9, 3.791979099656206*^9}, {
   3.7919791401900997`*^9, 3.791979178032308*^9}, {3.7919792107454453`*^9, 
   3.791979223337336*^9}, {3.7919793722796717`*^9, 3.7919794168872023`*^9}, {
   3.791979508832358*^9, 3.791979557719309*^9}, {3.791979591984161*^9, 
   3.791979623159382*^9}, {3.79197965475905*^9, 3.791979664382655*^9}, {
   3.791979702504488*^9, 3.791979708422546*^9}, {3.791979772814735*^9, 
   3.791979857446319*^9}, {3.791979893334545*^9, 3.791979904390129*^9}, {
   3.791980141854616*^9, 3.7919801433129873`*^9}, {3.791980222749228*^9, 
   3.791980235676947*^9}, {3.7919802925094767`*^9, 3.791980375156993*^9}, {
   3.791980473044626*^9, 3.791980506716281*^9}, {3.791980586141465*^9, 
   3.791980604460066*^9}, {3.79198067509223*^9, 3.791980763451518*^9}, {
   3.791980879243898*^9, 3.7919809014909897`*^9}, {3.791980946743524*^9, 
   3.791980983106353*^9}, {3.791981062211384*^9, 3.791981094034053*^9}, {
   3.79198140209833*^9, 3.791981445776876*^9}, {3.7919815227219133`*^9, 
   3.791981551176866*^9}, {3.791981583192677*^9, 3.791981611944457*^9}, {
   3.7919816718414583`*^9, 3.7919816948562737`*^9}, {3.7919817537602797`*^9, 
   3.791981812775608*^9}, {3.791981879384235*^9, 3.7919818905113583`*^9}, {
   3.7919820045319157`*^9, 3.791982040148568*^9}, {3.791982070600361*^9, 
   3.791982092119007*^9}, {3.7919822559746304`*^9, 3.791982267718235*^9}, {
   3.7919823406872683`*^9, 3.791982363566121*^9}, {3.791982419782289*^9, 
   3.791982432325838*^9}, {3.791983112532898*^9, 3.791983131187779*^9}, {
   3.791983172940339*^9, 3.791983318291422*^9}, {3.7919833691720324`*^9, 
   3.791983427930606*^9}, {3.791983481223692*^9, 3.791983512930419*^9}, {
   3.791983588827495*^9, 3.7919836396984053`*^9}, {3.792000621671402*^9, 
   3.792000645229453*^9}, {3.792000815837564*^9, 3.7920008413649406`*^9}, {
   3.792000906214622*^9, 3.7920009344368067`*^9}, {3.7920009900934057`*^9, 
   3.792001028036676*^9}, {3.792001066689745*^9, 3.792001127781075*^9}, {
   3.792001233954824*^9, 3.79200127526*^9}, {3.7920013125812283`*^9, 
   3.7920013333559027`*^9}, {3.7920014031080914`*^9, 3.792001429483808*^9}, {
   3.792002332858821*^9, 3.792002362017838*^9}, {3.792002444017625*^9, 
   3.792002455721018*^9}, {3.792002493970446*^9, 3.792002546536955*^9}, {
   3.792002620945242*^9, 3.792002638440628*^9}, {3.792002789881678*^9, 
   3.792002872007946*^9}, {3.792002919529126*^9, 3.792002981567898*^9}, {
   3.792003031784237*^9, 3.7920031204876537`*^9}, {3.7920034663358088`*^9, 
   3.792003474790434*^9}, {3.792003504942518*^9, 3.792003559446395*^9}, {
   3.792003655952772*^9, 3.7920037154299917`*^9}, {3.792003758735137*^9, 
   3.7920038054696207`*^9}, {3.792003836326988*^9, 3.792003871893664*^9}, {
   3.792003987558263*^9, 3.79200400193311*^9}, {3.792004118142441*^9, 
   3.7920041889251833`*^9}, {3.792004221769603*^9, 3.792004237349609*^9}, {
   3.792004331788947*^9, 3.792004401804373*^9}, {3.792004499822283*^9, 
   3.792004574819703*^9}, {3.792004610777073*^9, 3.792004659083665*^9}, {
   3.7920047284641857`*^9, 3.792004789667795*^9}, {3.792004868300851*^9, 
   3.792004898195175*^9}, {3.7920049407233133`*^9, 3.792004983331038*^9}, {
   3.7920050140816517`*^9, 3.792005016622406*^9}, {3.792005118779265*^9, 
   3.792005196946447*^9}, 3.79200525152808*^9, {3.792005325874292*^9, 
   3.7920053706986933`*^9}, {3.792006224272997*^9, 3.7920064088237247`*^9}, {
   3.792006461518503*^9, 3.7920064892631693`*^9}, {3.7920066123675632`*^9, 
   3.792006628102496*^9}, 3.792006676771627*^9, {3.792006725662883*^9, 
   3.7920067617429934`*^9}, {3.792006884655507*^9, 3.792006926197974*^9}, {
   3.7920069686114483`*^9, 3.792006977334331*^9}, {3.7920070252943697`*^9, 
   3.7920070699819183`*^9}, {3.792007264780108*^9, 3.792007319852889*^9}, {
   3.7920073702820187`*^9, 3.792007376453246*^9}, {3.792007452285818*^9, 
   3.792007486965053*^9}, {3.792007520273555*^9, 3.792007607900999*^9}, 
   3.792007638901722*^9, {3.792007683125305*^9, 3.7920078243889008`*^9}, {
   3.792007860326127*^9, 3.792007922100607*^9}, {3.792007996787891*^9, 
   3.792008044182561*^9}, {3.792008100813401*^9, 3.7920081933475447`*^9}, {
   3.792008254171434*^9, 3.792008312723504*^9}, {3.792008412756398*^9, 
   3.792008496842594*^9}, {3.792008563843473*^9, 3.792008581794485*^9}, {
   3.792008616987513*^9, 3.792008698682955*^9}, {3.792008847590845*^9, 
   3.792008943369197*^9}, {3.792008985866108*^9, 3.7920090963688602`*^9}, {
   3.792009153801051*^9, 3.792009273568342*^9}, {3.792009373801137*^9, 
   3.792009429960023*^9}, {3.79200946613729*^9, 3.792009486663883*^9}, {
   3.792009546153343*^9, 3.792009578300891*^9}, {3.7920096221758833`*^9, 
   3.792009638671957*^9}, {3.792009682528266*^9, 3.792009699215657*^9}, {
   3.792009829776539*^9, 3.7920098834467907`*^9}, {3.792009924800335*^9, 
   3.792010099182179*^9}, {3.792010130683217*^9, 3.79201025754228*^9}, {
   3.792010521694162*^9, 3.792010535061512*^9}, {3.792056664025276*^9, 
   3.7920567560298443`*^9}, {3.792056883433568*^9, 3.792056904856295*^9}, {
   3.792057045799962*^9, 3.792057103983447*^9}, {3.7920572209761553`*^9, 
   3.792057320206594*^9}, {3.792057367355089*^9, 3.7920575253981256`*^9}, 
   3.792057573891426*^9, {3.792057614006065*^9, 3.792057682630103*^9}, {
   3.792057771650649*^9, 3.792057836429661*^9}, {3.792057944558427*^9, 
   3.792057975612982*^9}, {3.792058122581216*^9, 3.792058140948477*^9}, {
   3.792058202109329*^9, 3.792058229484209*^9}, {3.792058419955634*^9, 
   3.792058436611384*^9}, {3.7920584753733253`*^9, 3.792058495115484*^9}, {
   3.792058588715065*^9, 3.7920586182104816`*^9}, {3.792058668171555*^9, 
   3.792058753786388*^9}, {3.792059039561943*^9, 3.792059073832576*^9}, {
   3.792059160200799*^9, 3.792059173128292*^9}, {3.792059207241316*^9, 
   3.792059229688102*^9}, 3.792059312142351*^9, {3.792059352208933*^9, 
   3.792059358903325*^9}, {3.792059445607457*^9, 3.7920594708074617`*^9}, {
   3.792059515448368*^9, 3.7920595805110703`*^9}, {3.792059614296983*^9, 
   3.792059649639097*^9}, {3.792059868413967*^9, 3.792059909253572*^9}, {
   3.7920599830600023`*^9, 3.792060079869247*^9}, {3.792060137947936*^9, 
   3.79206023995702*^9}, {3.7920634690730133`*^9, 3.792063554038158*^9}, {
   3.79206380190287*^9, 3.792063841645399*^9}, {3.7920638955421553`*^9, 
   3.792063918557139*^9}, {3.79206399495887*^9, 3.792064108221085*^9}, {
   3.792064170741592*^9, 3.792064186877388*^9}, {3.792064218262142*^9, 
   3.792064231924721*^9}, {3.792064292188705*^9, 3.792064320444255*^9}, {
   3.7920643679902678`*^9, 3.7920643936441174`*^9}, {3.792064464252646*^9, 
   3.792064498987948*^9}, {3.7920645549288883`*^9, 3.7920646202119637`*^9}, {
   3.7920647599005547`*^9, 3.7920648256755953`*^9}, {3.792064875277047*^9, 
   3.792064946283156*^9}, {3.792064983750299*^9, 3.79206505726412*^9}, {
   3.792065098699679*^9, 3.792065152035548*^9}, {3.792065243218335*^9, 
   3.7920653053711233`*^9}, {3.792065335421102*^9, 3.792065433659461*^9}, {
   3.7920655106670628`*^9, 3.79206560166638*^9}, {3.792065744915216*^9, 
   3.7920657612182417`*^9}, {3.7920658016431227`*^9, 3.792065855338241*^9}, {
   3.7920659325389214`*^9, 3.7920659341176453`*^9}, {3.792065982737631*^9, 
   3.792066071057642*^9}, {3.792066182859272*^9, 3.792066212041196*^9}, {
   3.79206625065009*^9, 3.792066271401129*^9}, {3.792066578041861*^9, 
   3.792066602848248*^9}, {3.7920666622084513`*^9, 3.792066707096539*^9}, {
   3.792066747817254*^9, 3.792066776128234*^9}, {3.7920668314324503`*^9, 
   3.792066853864159*^9}, {3.7920668918009233`*^9, 3.792066940727746*^9}, {
   3.792066979199053*^9, 3.792067018717465*^9}, {3.792067088236288*^9, 
   3.7920671443240423`*^9}, {3.792067191732606*^9, 3.792067223412621*^9}, {
   3.7920672765248957`*^9, 3.7920672827473907`*^9}, {3.792067352747711*^9, 
   3.792067388145247*^9}, {3.79206747398868*^9, 3.792067553242628*^9}, {
   3.792067741399529*^9, 3.792067782826174*^9}, {3.792067854387492*^9, 
   3.792067869265793*^9}, {3.792067958290807*^9, 3.792067990689536*^9}, {
   3.7920680480585413`*^9, 3.792068060314183*^9}, {3.7920680936022453`*^9, 
   3.792068148793075*^9}, {3.7920681873860292`*^9, 3.792068219665131*^9}, {
   3.792068278489661*^9, 3.7920683925567617`*^9}, 3.792068453871962*^9, {
   3.792068543384212*^9, 3.792068596375608*^9}, {3.7920686659526997`*^9, 
   3.7920686686358232`*^9}, {3.7920687128158827`*^9, 3.792068743735964*^9}, {
   3.792072595655036*^9, 3.792072629838235*^9}, {3.7920728199178343`*^9, 
   3.792072883636806*^9}, {3.792072968389447*^9, 3.792072980149108*^9}, {
   3.7920730148783712`*^9, 3.7920730604691143`*^9}, {3.792073228796926*^9, 
   3.792073238916094*^9}, {3.7920732755654783`*^9, 3.7920732985481873`*^9}, {
   3.79207342909237*^9, 3.792073474102208*^9}, {3.792073537108163*^9, 
   3.79207363062783*^9}, {3.792073707742002*^9, 3.79207379284363*^9}, {
   3.792073886908819*^9, 3.792073972243672*^9}, {3.7920740291323013`*^9, 
   3.792074052722258*^9}, {3.792074088235415*^9, 3.792074118442247*^9}, {
   3.792074200762542*^9, 3.792074216458232*^9}, {3.792074284027001*^9, 
   3.7920743252818823`*^9}, {3.792074374362664*^9, 3.792074383425427*^9}, {
   3.792074462353684*^9, 3.7920744881374197`*^9}, {3.792074520650847*^9, 
   3.7920745234529753`*^9}, {3.792074656081785*^9, 3.7920747378969727`*^9}, {
   3.7920748051469717`*^9, 3.792074886808429*^9}, {3.792074949136962*^9, 
   3.792074958720426*^9}, {3.79207501711341*^9, 3.792075046632886*^9}, {
   3.792075119184568*^9, 3.792075140672288*^9}, {3.79209085247402*^9, 
   3.792090872784903*^9}, {3.792091001960679*^9, 3.7920910194328613`*^9}, {
   3.7920910574492064`*^9, 3.792091093567459*^9}, {3.7920911244774313`*^9, 
   3.792091147672037*^9}, {3.7920912066477757`*^9, 3.792091224455104*^9}, {
   3.792091259336187*^9, 3.7920913204229183`*^9}, {3.792091419600761*^9, 
   3.792091480970414*^9}, {3.79209154691153*^9, 3.792091593360096*^9}, {
   3.792091629312771*^9, 3.792091683271804*^9}, {3.792091777480583*^9, 
   3.792091801647883*^9}, {3.792091834887788*^9, 3.7920919023192673`*^9}, {
   3.792092007960709*^9, 3.792092088543178*^9}, {3.792092133286598*^9, 
   3.792092186254122*^9}, {3.792092288694934*^9, 3.792092330005911*^9}, {
   3.792092363774715*^9, 3.7920924412616587`*^9}, {3.7920924800985126`*^9, 
   3.7920925068850937`*^9}, {3.792092564997487*^9, 3.792092586614294*^9}, {
   3.792092618103051*^9, 3.792092653973175*^9}, {3.79209275910852*^9, 
   3.792092795524027*^9}, {3.7920928490199537`*^9, 3.792092899140061*^9}, {
   3.792092970671096*^9, 3.792093007419959*^9}, {3.792093089172359*^9, 
   3.792093117873623*^9}, {3.7920932686271772`*^9, 3.792093334146497*^9}, {
   3.792093364963827*^9, 3.7920933724663982`*^9}, {3.7920934527465982`*^9, 
   3.792093508722849*^9}, {3.7920935878821*^9, 3.7920936203610497`*^9}, {
   3.792093674432983*^9, 3.792093785288783*^9}, {3.7920938525455227`*^9, 
   3.792093893031859*^9}, {3.792093926839787*^9, 3.792093931200006*^9}, {
   3.792094019240205*^9, 3.792094075848118*^9}, {3.792094165512781*^9, 
   3.79209419614367*^9}, {3.7920942640157824`*^9, 3.792094280759644*^9}, {
   3.792094360975562*^9, 3.792094384358822*^9}, {3.792094433887363*^9, 
   3.792094580854805*^9}, {3.792094620526657*^9, 3.792094653958762*^9}, {
   3.79214821575957*^9, 3.7921482644136877`*^9}, {3.792148371956308*^9, 
   3.792148392787757*^9}, {3.7921484356685753`*^9, 3.792148462996833*^9}, {
   3.792148517548152*^9, 3.792148545764414*^9}, {3.792148596586596*^9, 
   3.7921486062470284`*^9}, {3.792148636868238*^9, 3.792148703066967*^9}, {
   3.792148787804336*^9, 3.792148814066821*^9}, {3.792148921450493*^9, 
   3.792148961633958*^9}, {3.792149084827688*^9, 3.7921491243453197`*^9}, {
   3.7921491626428137`*^9, 3.792149186437378*^9}, {3.792149243457573*^9, 
   3.7921492708131638`*^9}, {3.7921493820169077`*^9, 3.792149452312477*^9}, {
   3.7921495117049932`*^9, 3.792149534208206*^9}, {3.792149833943878*^9, 
   3.7921498519758787`*^9}, {3.7921499202472363`*^9, 3.792149971846669*^9}, {
   3.792150034574286*^9, 3.7921500863179913`*^9}, {3.7921501868389273`*^9, 
   3.792150219237585*^9}, {3.792163285094727*^9, 3.79216328788151*^9}, {
   3.79216343563815*^9, 3.7921634780371647`*^9}, {3.792163837372818*^9, 
   3.7921639137155*^9}, {3.7921689804294043`*^9, 3.792169011956422*^9}, {
   3.792169291893709*^9, 3.792169327380838*^9}, {3.792169376685378*^9, 
   3.7921694008763037`*^9}, {3.792169441972474*^9, 3.7921694730836563`*^9}, {
   3.792169505881735*^9, 3.792169531835638*^9}, {3.792169655908297*^9, 
   3.792169699435631*^9}, {3.7921697308919992`*^9, 3.792169813675159*^9}, {
   3.792169844744135*^9, 3.792169901218458*^9}, {3.792169970658978*^9, 
   3.792169989218347*^9}, {3.792170057121529*^9, 3.792170128706448*^9}, {
   3.792170268603195*^9, 3.792170389544986*^9}, {3.792170429257338*^9, 
   3.7921704791137047`*^9}, {3.7921708694405823`*^9, 3.792170947103108*^9}, {
   3.792170978178293*^9, 3.792170997319298*^9}, {3.792171065695706*^9, 
   3.792171075231241*^9}, {3.792171109360465*^9, 3.792171132399021*^9}, {
   3.792171168407095*^9, 3.792171233671279*^9}, {3.79217193500487*^9, 
   3.7921719507316227`*^9}, {3.7921720267800207`*^9, 
   3.7921720812436247`*^9}, {3.792172113953455*^9, 3.792172140123785*^9}, {
   3.7921722303322363`*^9, 3.792172242548047*^9}, {3.792172396860506*^9, 
   3.7921724728992987`*^9}, {3.7921725798111362`*^9, 3.792172663370961*^9}, {
   3.792172736378565*^9, 3.792172783257408*^9}, {3.792173114112528*^9, 
   3.792173159737705*^9}, {3.7921735406014357`*^9, 3.792173772359365*^9}, {
   3.792173850536625*^9, 3.792173973775729*^9}, {3.7921740370797243`*^9, 
   3.7921740529029503`*^9}, {3.792174084486821*^9, 3.7921740931270857`*^9}, {
   3.792174181023217*^9, 3.7921742128148413`*^9}, {3.7921743887935333`*^9, 
   3.792174438733809*^9}, {3.7921745119806347`*^9, 3.792174570397848*^9}, {
   3.792174687799198*^9, 3.792174749492627*^9}, {3.792174794722575*^9, 
   3.792174810021182*^9}, {3.7921748628853292`*^9, 3.7921750576677933`*^9}, 
   3.7921774056507072`*^9, {3.792177474476673*^9, 3.792177607268085*^9}, {
   3.792177719532565*^9, 3.792177765812282*^9}, {3.7921778193575363`*^9, 
   3.7921779671325827`*^9}, {3.792178019484755*^9, 3.792178068563383*^9}, {
   3.792178153483264*^9, 3.792178208810174*^9}, {3.79217824157782*^9, 
   3.7921782548033943`*^9}, {3.7921782970347424`*^9, 3.792178327731035*^9}, {
   3.7921783835236177`*^9, 3.792178484844426*^9}, {3.7921785953140182`*^9, 
   3.792178695608839*^9}, {3.7921787310254593`*^9, 3.792178750064847*^9}, {
   3.792179145016543*^9, 3.792179146436199*^9}, {3.792179220848196*^9, 
   3.792179288231237*^9}, {3.7921793631040297`*^9, 3.792179440878703*^9}, {
   3.7921794860953617`*^9, 3.7921796428062267`*^9}, {3.792179700493721*^9, 
   3.792179832710017*^9}, {3.792179863262747*^9, 3.792179869653634*^9}, {
   3.792179929669546*^9, 3.792179988838839*^9}, {3.7921800471181917`*^9, 
   3.792180074629675*^9}, {3.792180141470113*^9, 3.79218014965549*^9}, {
   3.7921802291097717`*^9, 3.792180289310375*^9}, {3.7921803201229897`*^9, 
   3.7921803698055363`*^9}, {3.7921806804607887`*^9, 3.79218071970849*^9}, {
   3.792180795685034*^9, 3.7921808293889236`*^9}, {3.792180876076735*^9, 
   3.792180881892273*^9}, {3.792181035707037*^9, 3.792181087651082*^9}, {
   3.792181120536237*^9, 3.7921811270753727`*^9}, {3.792181176579297*^9, 
   3.792181346827529*^9}, {3.792181416275526*^9, 3.79218143771974*^9}, {
   3.792181508090598*^9, 3.792181546723024*^9}, {3.792181626803714*^9, 
   3.792181702914371*^9}, {3.792181751826666*^9, 3.792181784530097*^9}, {
   3.792181867226634*^9, 3.7921818989704123`*^9}, {3.792182015642954*^9, 
   3.792182083481287*^9}, {3.792182114978153*^9, 3.7921821468729362`*^9}, {
   3.792182206161172*^9, 3.792182223096621*^9}, {3.792182267057352*^9, 
   3.792182314032692*^9}, {3.7921823807041073`*^9, 3.792182438967422*^9}, {
   3.7921825065574903`*^9, 3.792182580359161*^9}, {3.792182663439589*^9, 
   3.792182688270681*^9}, {3.792182783151885*^9, 3.792182794926564*^9}, {
   3.792182841366938*^9, 3.792182894526133*^9}, {3.7921831610171633`*^9, 
   3.792183252207202*^9}, {3.79218328943861*^9, 3.792183294094923*^9}, {
   3.792185049949213*^9, 3.7921850727663317`*^9}, {3.792185441041395*^9, 
   3.79218548540156*^9}, {3.792185528610188*^9, 3.79218563957548*^9}, {
   3.792185702865202*^9, 3.792185815230711*^9}, 3.792185848053295*^9, {
   3.7921859077751827`*^9, 3.7921860679021273`*^9}, {3.792186332149857*^9, 
   3.792186349109666*^9}, {3.7921863841659184`*^9, 3.792186415237406*^9}, {
   3.792186501653516*^9, 3.792186555364787*^9}, {3.792186617214325*^9, 
   3.792186647837885*^9}, {3.792187020548482*^9, 3.792187047604026*^9}, {
   3.792187105291669*^9, 3.792187149427387*^9}, {3.792187189148094*^9, 
   3.792187204666979*^9}, {3.792187239978953*^9, 3.792187370379573*^9}, {
   3.7921874337892723`*^9, 3.792187442868602*^9}, {3.792187475628743*^9, 
   3.7921874902837353`*^9}, {3.792187537555994*^9, 3.792187644146974*^9}, {
   3.792187749235351*^9, 3.792187809594891*^9}, {3.792187937500401*^9, 
   3.792187966386414*^9}, {3.792188037043529*^9, 3.7921880612666597`*^9}, {
   3.7921881488589993`*^9, 3.792188229192836*^9}, {3.792188282641983*^9, 
   3.792188289442308*^9}, {3.792188326018537*^9, 3.792188348373879*^9}, {
   3.792188416569846*^9, 3.7921884342014437`*^9}, {3.792188469193325*^9, 
   3.7921884907927017`*^9}, {3.792188542553521*^9, 3.792188560672945*^9}, {
   3.792188594965461*^9, 3.792188616009169*^9}, {3.7921887085705833`*^9, 
   3.792188743632021*^9}, {3.792188794537228*^9, 3.792188848071755*^9}, {
   3.792188895149646*^9, 3.7921889361838703`*^9}, {3.79218899208788*^9, 
   3.7921890911364527`*^9}, {3.79218912724006*^9, 3.7921892045114737`*^9}, {
   3.792189275647266*^9, 3.792189334631212*^9}, {3.792189406463848*^9, 
   3.792189573760273*^9}, {3.792233156799039*^9, 3.792233178924789*^9}, {
   3.792233419324587*^9, 3.792233445812676*^9}, {3.7922335078207207`*^9, 
   3.792233554876861*^9}, {3.792233805619893*^9, 3.7922338611228743`*^9}, {
   3.792234482954481*^9, 3.792234604761258*^9}, {3.792234660658008*^9, 
   3.792234694601293*^9}, {3.7922347590400963`*^9, 3.792234776065968*^9}, {
   3.792234806362101*^9, 3.792234951976482*^9}, {3.792234988025757*^9, 
   3.7922351469457827`*^9}, {3.792235177985285*^9, 3.7922353717768803`*^9}, {
   3.792235437953203*^9, 3.7922355153115396`*^9}, {3.7922355510889263`*^9, 
   3.7922355775755997`*^9}, {3.792235746232964*^9, 3.792235917166779*^9}, {
   3.7922360014235153`*^9, 3.7922360206383133`*^9}, {3.792236520182423*^9, 
   3.7922366289003572`*^9}, {3.7922367282032757`*^9, 3.792236761579733*^9}, {
   3.7922369938106613`*^9, 3.792237016610179*^9}, {3.7922373085146646`*^9, 
   3.79223744770481*^9}, {3.792237482948883*^9, 3.792237531720612*^9}, {
   3.792237682416539*^9, 3.7922377605600033`*^9}, {3.79223780420905*^9, 
   3.7922378245837307`*^9}, {3.792237860345119*^9, 3.792237955496893*^9}, {
   3.79223802899347*^9, 3.792238065720751*^9}, {3.792238123656439*^9, 
   3.792238193112005*^9}, {3.7922382666390038`*^9, 3.79223836815934*^9}, {
   3.792238434655702*^9, 3.792238614190775*^9}, {3.7922386526482477`*^9, 
   3.792238703270143*^9}, {3.792238766334384*^9, 3.7922390158296833`*^9}, {
   3.7922390736079483`*^9, 3.79223917047607*^9}, 3.792239301845175*^9, {
   3.792239359903738*^9, 3.792239370262486*^9}, {3.7922394037179127`*^9, 
   3.792239404733032*^9}, {3.792239543150243*^9, 3.792239551956875*^9}, {
   3.7922399133335*^9, 3.792239962736484*^9}, {3.792240131925292*^9, 
   3.792240132258789*^9}, {3.792240169979957*^9, 3.792240182170274*^9}},
 CellLabel->
  "In[617]:=",ExpressionUUID->"47bea5fa-4c10-4e3b-b5fc-9d13acb8c412"]
},
WindowSize->{1777, 1395},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 93226, 1648, 490, "Input",ExpressionUUID->"47bea5fa-4c10-4e3b-b5fc-9d13acb8c412"]
}
]
*)

